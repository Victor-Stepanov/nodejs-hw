/* 
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 300 000.
–ù—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ 3 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞. 
1. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–º —Ü–∏–∫–ª–æ–º –∏ –∑–∞–º–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
2. –†–∞–∑–±–µ–π—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–∞ N –º–∞—Å—Å–∏–≤–æ–≤, –≥–¥–µ N —á–∏—Å–ª–æ —è–¥–µ—Ä —É –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ. 
–ó–∞–º–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—É–Ω–∫—Ç–æ–º 1.

*/
const { cpus } = require("node:os");
const { Worker } = require("node:worker_threads");

const { getChunks, divisionBy } = require("./utils");

const CPUS_COUNT = cpus().length;
const initialArray = Array.from({ length: 300000 }, (_, i) => i + 1);

function getSlowResult() {
  const start = Date.now();
  const count = divisionBy(initialArray);
  const end = Date.now();
  const duration = (end - start).toFixed(2);
  return { count, duration };
}

function getResultInThreads(array) {
  return new Promise((resolve, reject) => {
    const worker = new Worker("./worker", {
      workerData: {
        array,
      },
    });

    worker.on("message", (data) => {
      resolve(data);
    });

    worker.on("error", (error) => {
      reject(error.message);
    });
  });
}

async function main(array) {
  try {
    console.log("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n");
    console.log(`üíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ${CPUS_COUNT}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: ${array.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n`);

    console.log("=== –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è ===");
    const singleThreadResult = getSlowResult();
    console.log(
      `‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª, –¥–µ–ª—è—â–∏—Ö—Å—è –Ω–∞ 3: ${singleThreadResult.count}`
    );
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${singleThreadResult.duration}ms\n`);

    console.log("\n=== –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è ===");
    const chunks = getChunks(array, CPUS_COUNT);
    console.log(`üì¶ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${chunks[0].length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    const start = Date.now();
    const promises = chunks.map((chunk) => getResultInThreads(chunk));
    const results = await Promise.all(promises);
    const multiThreadCount = results.reduce((sum, count) => sum + count, 0);
    const end = Date.now();
    const duration = (end - start).toFixed(2);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª, –¥–µ–ª—è—â–∏—Ö—Å—è –Ω–∞ 3: ${multiThreadCount}`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(
      `\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${
        singleThreadResult.count === multiThreadCount
          ? "‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç"
          : "‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
      }`
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

main(initialArray);
